name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/chattyfy-frontend
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/chattyfy-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          # Login to Docker Hub
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          
          # Create network if not exists
          docker network inspect chattyfy-net >/dev/null 2>&1 || docker network create chattyfy-net
          
          # Pull latest images
          docker pull ${{ env.FRONTEND_IMAGE }}:latest
          docker pull ${{ env.BACKEND_IMAGE }}:latest
          
          # Stop and remove existing containers
          docker stop chattyfy-frontend chattyfy-backend 2>/dev/null || true
          docker rm chattyfy-frontend chattyfy-backend 2>/dev/null || true
          
          # Remove old images to save space
          docker image prune -f
          
          # Run backend container
          docker run -d \
            --name chattyfy-backend \
            --restart unless-stopped \
            -p 3000:3000 \
            --network chattyfy-net \
            -e NODE_ENV=production \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} \
            -e CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} \
            -e CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} \
            ${{ env.BACKEND_IMAGE }}:latest
          
          # Run frontend container
          docker run -d \
            -p 5000:5000 \
            --name chattyfy-frontend \
            --restart unless-stopped \
            --network chattyfy-net \
            -e NODE_ENV=production \
            -e VITE_API_URL=${{ secrets.VITE_API_URL }} \
            ${{ env.FRONTEND_IMAGE }}:latest
          
          # Wait a moment for containers to start
          sleep 5
          
          # Verify containers are running
          echo "=== Container Status ==="
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Show recent logs for verification
          echo "=== Backend Logs (last 10 lines) ==="
          docker logs --tail 10 chattyfy-backend || echo "Backend container not found"
          
          echo "=== Frontend Logs (last 10 lines) ==="
          docker logs --tail 10 chattyfy-frontend || echo "Frontend container not found"
          
          echo "âœ… Deployment completed successfully!"
          
          # Health check
          echo "=== Health Check ==="
          echo "Frontend should be available at: http://${{ secrets.EC2_HOST }}"
          echo "Backend should be available at: http://${{ secrets.EC2_HOST }}:3000"